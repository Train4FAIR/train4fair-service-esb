package de.fraunhofer.fit.train.facade;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URI;
import java.nio.charset.Charset;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.HttpVersion;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicHttpResponse;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.core.env.Environment;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.github.sardine.Sardine;
import com.github.sardine.SardineFactory;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import de.fraunhofer.fit.train.model_v1.Artifacts;
import de.fraunhofer.fit.train.model_v1.Resources;
import de.fraunhofer.fit.train.model_v1.Result;
import de.fraunhofer.fit.train.model_v1.Train;
import de.fraunhofer.fit.train.model_v1.Wagons;
import de.fraunhofer.fit.train.model_v2.autogenerated.InternalId;
import de.fraunhofer.fit.train.model_v2.autogenerated.InternalPointer;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.ArchitectureOCIEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.ContributorTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.DateTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.DescriptionTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.FunderIdentifierTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.IdentifierTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.LanguageDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.NameIdentifierSchemeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.NameTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.OsOciEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.RelatedIdentifierTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.RelationTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.ResourceTypeGeneralDataciteEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.StationProfileEnum;
import de.fraunhofer.fit.train.model_v2.doi.datacitie.helper.TitleTypeDataciteEnum;
import de.fraunhofer.fit.train.model_v2.nodered.ArtifactsMetadataNoderedNODE;
import de.fraunhofer.fit.train.model_v2.nodered.ResourcesMetadataNoderedNODE;
import de.fraunhofer.fit.train.model_v2.nodered.TrainMetadataNoderedNODE;
import de.fraunhofer.fit.train.model_v2.nodered.WagonsMetadataNoderedNODE;
import de.fraunhofer.fit.train.model_v2.station.StationProfiles;
import de.fraunhofer.fit.train.persistence.IArtifactRepository;
import de.fraunhofer.fit.train.persistence.IArtifactsRepositoryNode;
import de.fraunhofer.fit.train.persistence.IInternalIdRepository;
import de.fraunhofer.fit.train.persistence.IInternalPointerRepository;
import de.fraunhofer.fit.train.persistence.IResourceRepository;
import de.fraunhofer.fit.train.persistence.IResourcesRepositoryNode;
import de.fraunhofer.fit.train.persistence.ITrainRepository;
import de.fraunhofer.fit.train.persistence.ITrainRepositoryNode;
import de.fraunhofer.fit.train.persistence.IWagonRepository;
import de.fraunhofer.fit.train.persistence.IWagonsRepositoryNode;
import de.fraunhofer.fit.train.persistence.IWireHolderRepository;
import de.fraunhofer.fit.train.servicelocator.TrainServiceLocator;
import de.fraunhofer.fit.train.util.TrainUtil;

@EnableAspectJAutoProxy
@Service
public class ServiceFacade {


	@Autowired
	private TrainServiceLocator trainServiceLocator;

	@Autowired
	private MongoOperations mongoOps;

	@Autowired
	private Environment env;

	@Autowired
	private ITrainRepository trainRepository;

	@Autowired
	private IInternalIdRepository internalIdRepository;

	@Autowired
	private IInternalPointerRepository internalPointerRepository;

	@Autowired
	private IWagonRepository wagonRepository;

	@Autowired
	private IResourceRepository resourceRepository;

	@Autowired
	private IArtifactRepository artifactRepository;

	@Autowired
	private ITrainRepositoryNode trainRepositoryNode;

	@Autowired
	private IWagonsRepositoryNode wagonRepositoryNode;

	@Autowired
	private IResourcesRepositoryNode resourcesRepositoryNode;

	@Autowired
	private IArtifactsRepositoryNode artifactsRepositoryNode;

	@Autowired
	private TrainUtil trainUtil;

	@Autowired
	private IWireHolderRepository wireHolderRepository;

	public String getInternalId() {
		InternalId internalId = internalIdRepository.save(new InternalId());
		return internalId.get_id().toString();
	}

	public String getInternalPointer() {
		InternalPointer internalPointer = internalPointerRepository.save(new InternalPointer());
		return internalPointer.get_id().toString();
	}

	public String getInternalVersion() {
		InternalId internalId = internalIdRepository.save(new InternalId());
		String internalIdStr = internalId.get_id().toString();
		InternalPointer internalPointer = internalPointerRepository.save(new InternalPointer());
		String internalPointerStr = internalPointer.get_id().toString();
		return internalIdStr + internalPointerStr + "_" + (new SimpleDateFormat("dd.MM.yyyy").format(new Date()));
	}

	public List<ArchitectureOCIEnum> getArchitectureEnumValues() {
		List<ArchitectureOCIEnum> enumValues = Arrays.asList(ArchitectureOCIEnum.values());
		return enumValues;
	}

	public List<OsOciEnum> getOsEnumValues() {
		List<OsOciEnum> enumValues = Arrays.asList(OsOciEnum.values());
		return enumValues;
	}

	public List<StationProfileEnum> getStationProfileEnumValues() {
		List<StationProfileEnum> enumValues = Arrays.asList(StationProfileEnum.values());
		return enumValues;
	}

	public List<ContributorTypeDataciteEnum> getContributorTypeEnumValues() {
		List<ContributorTypeDataciteEnum> enumValues = Arrays.asList(ContributorTypeDataciteEnum.values());
		return enumValues;
	}

	public List<DateTypeDataciteEnum> getDateTypeEnumValues() {
		List<DateTypeDataciteEnum> enumValues = Arrays.asList(DateTypeDataciteEnum.values());
		return enumValues;
	}

	public List<DescriptionTypeDataciteEnum> getDescriptionTypeEnumValues() {
		List<DescriptionTypeDataciteEnum> enumValues = Arrays.asList(DescriptionTypeDataciteEnum.values());
		return enumValues;
	}

	public List<FunderIdentifierTypeDataciteEnum> getFunderIdentifierTypeEnumValues() {
		List<FunderIdentifierTypeDataciteEnum> enumValues = Arrays.asList(FunderIdentifierTypeDataciteEnum.values());
		return enumValues;
	}

	public List<IdentifierTypeDataciteEnum> getIdentifierTypeEnumValues() {
		List<IdentifierTypeDataciteEnum> enumValues = Arrays.asList(IdentifierTypeDataciteEnum.values());
		return enumValues;
	}

	public List<LanguageDataciteEnum> getLanguageEnumValues() {
		List<LanguageDataciteEnum> enumValues = Arrays.asList(LanguageDataciteEnum.values());
		return enumValues;
	}

	public List<NameIdentifierSchemeDataciteEnum> getNameIdentifierSchemeEnumValues() {
		List<NameIdentifierSchemeDataciteEnum> enumValues = Arrays.asList(NameIdentifierSchemeDataciteEnum.values());
		return enumValues;
	}

	public List<NameTypeDataciteEnum> getNameTypeEnumValues() {
		List<NameTypeDataciteEnum> enumValues = Arrays.asList(NameTypeDataciteEnum.values());
		return enumValues;
	}

	public List<RelatedIdentifierTypeDataciteEnum> getRelatedIdentifierTypeEnumValues() {
		List<RelatedIdentifierTypeDataciteEnum> enumValues = Arrays.asList(RelatedIdentifierTypeDataciteEnum.values());
		return enumValues;
	}

	public List<RelationTypeDataciteEnum> getRelationTypeEnumValues() {
		List<RelationTypeDataciteEnum> enumValues = Arrays.asList(RelationTypeDataciteEnum.values());
		return enumValues;
	}

	public List<ResourceTypeGeneralDataciteEnum> getResourceTypeGeneralEnumValues() {
		List<ResourceTypeGeneralDataciteEnum> enumValues = Arrays.asList(ResourceTypeGeneralDataciteEnum.values());
		return enumValues;
	}

	public List<TitleTypeDataciteEnum> getTitleTypeEnumValues() {
		List<TitleTypeDataciteEnum> enumValues = Arrays.asList(TitleTypeDataciteEnum.values());
		return enumValues;
	}

	public void deleteTrainById(String id) throws IOException, NoSuchAlgorithmException {
		trainRepository.deleteById(id);
	}

	public void deleteAllWagons() throws IOException, NoSuchAlgorithmException {
		wagonRepository.deleteAll();
	}

	public void deleteAllArtifacts() {
		artifactRepository.deleteAll();
	}

	public void deleteAllResources() throws IOException, NoSuchAlgorithmException {
		resourceRepository.deleteAll();
	}

	public Train saveUpdateTrain(Train train) throws IOException, NoSuchAlgorithmException {
		return trainRepository.save(train);
	}

	public Resources saveUpdateResource(Resources resources) throws IOException, NoSuchAlgorithmException {
		return resourceRepository.save(resources);
	}

	@SuppressWarnings({ "finally", "deprecation" })
	public void sendLandPageToDav(String internalId) throws IOException {

		Train train = findTrainByInternalId(internalId);
		String name = env.getProperty("env.dav.name");
		String type = env.getProperty("env.dav.type");
		String token = env.getProperty("env.dav.token");

		JSONObject env;
		env = trainServiceLocator.locateEnvironment(name, type, token);

		String username = env.getString("user");
		String password = env.getString("pass");
		Sardine sardine = SardineFactory.begin(username, password);
		try {
			String filePath = "/tmp/webdav/";
			if (!new File(filePath).exists()) {
				new File(filePath).createNewFile();
			}
			String host = env.getString("host");
			String port = env.getString("port");

			String webdavdir = "http://" + host + ":" + port;
			String url = webdavdir + "/" + train.getInternalId() + "/";

			System.out.println("sardine landpageurl: " + url);
			Boolean existURL = sardine.exists(url);
			if (!existURL) {
				sardine.createDirectory(url);
			}

			String filedavUrl = url + "index.html";
			sardine.put(filedavUrl, customlandpage(train).getBytes());

		} catch (Exception e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			sardine.shutdown();
		}

	}

	@SuppressWarnings({ "finally", "deprecation" })
	public Artifacts sendToDav(Artifacts artifacts, String internalId) throws IOException {

		Train train = findTrainByInternalId(internalId);
		String name = env.getProperty("env.dav.name");
		String type = env.getProperty("env.dav.type");
		String token = env.getProperty("env.dav.token");

		JSONObject env;
		env = trainServiceLocator.locateEnvironment(name, type, token);

		String username = env.getString("user");
		String password = env.getString("pass");
		Sardine sardine = SardineFactory.begin(username, password);
		try {
			String filePath = "/tmp/webdav/";
			if (!new File(filePath).exists()) {
				new File(filePath).createNewFile();
			}
			String host = env.getString("host");
			String port = env.getString("port");

			String webdavdir = "http://" + host + ":" + port;
			String url = webdavdir + "/" + train.getInternalId() + "/";

			if (train.getInternalId().equals(artifacts.getInternalId())) {
				System.out.println("sardine url: " + url);
				Boolean existURL = sardine.exists(url);
				if (!existURL) {
					sardine.createDirectory(url);
				}
			}
			String filedata = artifacts.getFiledata();
			String filename = artifacts.getFilename();
			if ((filename == null || "".equals(filename)) && artifacts.getName() != null
					&& !"".equals(artifacts.getName())) {
				filename = artifacts.getName();
			}
			if (filename == null || "".equals(filename)) {
				throw new RuntimeException(
						"The Artifacts was not sent to webdav since the property name/filename was not set.");
			}
			filedata = filedata.split(",")[1];
			filename = filename.replace("\"", "");

			byte[] fileBytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(filedata);

			String filedavUrl = url + "/" + filename.trim();
			if (sardine.exists(filedavUrl)) {
				return null;
			}
			sardine.put(filedavUrl, fileBytes);

			artifacts.setFiledata(null);
			artifacts.setFileUrl(url);
			artifacts.setChecksum(TrainUtil.getChecksum(fileBytes));
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage(), e);
		} finally {
			sardine.shutdown();
			return artifacts;
		}

	}


	public Wagons findWagonByInternalId(String internalId) {
		if (wagonRepository.findById(internalId) == null) {
			return null;
		}
		return wagonRepository.findById(internalId).get();
	}

	public Wagons findWagonByCorrelationObjectId(String correlationObjectId) {
		try {
			for (Wagons wagon : wagonRepository.findAll()) {
				if (wagon.getCorrelationObjectId() != null && !"".equals(wagon.getCorrelationObjectId())
						&& wagon.getCorrelationObjectId().equals(correlationObjectId)) {
					return wagon;
				}
			}

		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;
	}

	private Wagons findWagonByCorrelationObjectIdAndInternalId(String corrobjId, String internalId) {
		Query query = new Query();
		query.addCriteria(Criteria.where("correlationObjectId").is(corrobjId))
				.addCriteria(Criteria.where("internalId").is(internalId));
		List<Wagons> wagons = mongoOps.find(query, Wagons.class);
		if (!wagons.isEmpty()) {
			return wagons.get(0);
		} else {
			return null;
		}
	}

	private Wagons findWagonByCorrelationObjectIdAndInternalId(WagonsMetadataNoderedNODE wagonNode, String internalId) {
		try {
			for (Wagons wagon : wagonRepository.findAll()) {
				if (wagon.get_id() == null || "".equals(wagon.get_id().toString())) {
					continue;
				}

				Boolean testCollelationObjId = Boolean.FALSE;
				Boolean testInternalId = Boolean.FALSE;
				if (wagon.getCorrelationObjectId().equals(wagonNode.getCorrelationObjectId())) {
					System.out.println(wagon.getName());
					testCollelationObjId = Boolean.TRUE;
				}

				if (internalId.equals(wagon.getInternalId())) {
					testInternalId = Boolean.TRUE;

				}

				if (testCollelationObjId && testInternalId) {
					return wagon;
				}

			}

		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;
	}

	public Resources findResourcesByCorrelationObjectId(String correlationObjectId) {
		try {
			for (Resources resource : resourceRepository.findAll()) {
				if (resource.getCorrelationObjectId() != null && !"".equals(resource.getCorrelationObjectId())
						&& resource.getCorrelationObjectId().equals(correlationObjectId)) {
					return resource;
				}
			}

		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;
	}

	public Resources findResourcesByInternalId(String internalId) {
		try {
			for (Resources resource : resourceRepository.findAll()) {
				if (resource.getInternalId() != null && !"".equals(resource.getInternalId())
						&& resource.getInternalId().equals(internalId)) {
					return resource;
				}
			}

		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;
	}



	public Resources findResourceById(String id) {
		return resourceRepository.findById(id).get();
	}

	public Train findTrainByInternalId(String internalId) {
		try {
			Iterable<Train> trainList = trainRepository.findAll();
			for (Train train : trainList) {
				if (train.getInternalId() != null && !"".equals(train.getInternalId())
						&& train.getInternalId().equals(internalId)) {
					return train;
				}
			}

		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;

	}

	public Train getTrainById(String id) throws Exception {

		Optional<Train> opt = null;

		List<Train> result = trainRepository.findOneByQuery("internalId", id);

		if (result == null) {
			result = trainRepository.findOneBySmampleQuery("internalId", id);
		}

		if (result == null) {
			result = trainRepository.findOneBySimpleQuery("internalId", id);
		}

		if (result == null) {
			result = trainRepository.findOneByRegexQuery("internalId", id);
		}

		//
		Train caller = null;
		if (!result.isEmpty() && result.get(0) != null) {
			caller = trainRepository.findOneByQuery("internalId", id).get(0);
		}
		if (caller != null && caller.get_id() != null && !"".equals(caller.get_id().toString())) {
			opt = trainRepository.findById(caller.get_id().toString());
		} else {
			throw new RuntimeException("ERROR: searching for: " + id);
		}

		return opt.get();

	}

	public Train getTrainByDescription(String description) throws Exception {
		Field[] fields = Train.class.getDeclaredFields();
		List<String> selectedFields = new ArrayList<String>();
		Optional<Train> opt = null;
		for (Field field : fields) {
			if (field == null) {
				continue;
			}
			selectedFields.add(field.getName());
		}

		List<Train> result = trainRepository.findOneByQuery("description", description);

		if (result == null) {
			result = trainRepository.findOneBySmampleQuery("description", description);
		}

		if (result == null) {
			result = trainRepository.findOneBySimpleQuery("description", description);
		}

		if (result == null) {
			result = trainRepository.findOneByRegexQuery("description", description);
		}

		//
		Train caller = null;
		if (!result.isEmpty() && result.get(0) != null) {
			caller = trainRepository.findOneByQuery("description", description).get(0);
		}
		if (caller != null && caller.get_id() != null && !"".equals(caller.get_id().toString())) {
			opt = trainRepository.findById(caller.get_id().toString());
		} else {
			throw new RuntimeException("ERROR: searching for: " + description);
		}

		return opt.get();

	}



	public Result getResult(Train train) {
		Result result = new Result();

		StationProfiles stationProfiles1 = new StationProfiles();
		stationProfiles1.setStationProfile(new String[] { "Obesity", "Obesity", "Obesity" });

		StationProfiles stationProfiles2 = new StationProfiles();
		stationProfiles2.setStationProfile(new String[] { "Obesity", "Obesity", "Diabetes" });

		StationProfiles stationProfiles3 = new StationProfiles();
		stationProfiles3.setStationProfile(new String[] { "Diabetes", "Diabetes", "Diabetes" });

		StationProfiles stationProfiles4 = new StationProfiles();
		stationProfiles4.setStationProfile(new String[] { "Obesity", "Diabetes", "Diabetes" });

		StationProfiles stationProfiles5 = new StationProfiles();
		stationProfiles5.setStationProfile(new String[] { "Obesity", "Diabetes", "Diabetes" });

		StationProfiles stationProfiles6 = new StationProfiles();
		stationProfiles6.setStationProfile(new String[] { "Obesity", "Cancer", "Cancer" });

		StationProfiles stationProfiles7 = new StationProfiles();
		stationProfiles7.setStationProfile(new String[] { "Cancer", "Cancer", "Cancer" });

		StationProfiles stationProfiles8 = new StationProfiles();
		stationProfiles8.setStationProfile(new String[] { "Obesity", "Diabetes", "Cancer" });

		//
		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Obesity".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 99");
			result.setMeanAgeCohortResult("Mean age in cohort: 45.693222111678111");
			result.setPatientCohortFor("Patient cohort for Obesity, Obesity, Obesity");
			result.setRetrievedCohortSize("Retrieved cohort size 990");
		}

		//
		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Diabetes".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 101");
			result.setMeanAgeCohortResult("Mean age in cohort: 37.992222567222333");
			result.setPatientCohortFor("Patient cohort for Obesity, Obesity, Diabetes");
			result.setRetrievedCohortSize("Retrieved cohort size 666");
		}

		//
		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Diabetes".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Diabetes".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 788");
			result.setMeanAgeCohortResult("Mean age in cohort: 9.897145111752190");
			result.setPatientCohortFor("Patient cohort for Obesity, Diabetes, Diabetes");
			result.setRetrievedCohortSize("Retrieved cohort size 692");
		}

		//
		if (stationProfiles1.getStationProfile()[0].equals("Diabetes".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Diabetes".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Diabetes".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 496");
			result.setMeanAgeCohortResult("Mean age in cohort: 8.777123111789444");
			result.setPatientCohortFor("Patient cohort for Diabetes, Diabetes, Diabetes");
			result.setRetrievedCohortSize("Retrieved cohort size 450");
		}

		//
		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Cancer".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 380");
			result.setMeanAgeCohortResult("Mean age in cohort: 48.331118333222334");
			result.setPatientCohortFor("Patient cohort for Obesity, Obesity, Cancer");
			result.setRetrievedCohortSize("Retrieved cohort size 980");
		}

		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Cancer".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Cancer".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 103");
			result.setMeanAgeCohortResult("Mean age in cohort: 8.987458333301234");
			result.setPatientCohortFor("Patient cohort for Obesity, Cancer, Cancer");
			result.setRetrievedCohortSize("Retrieved cohort size 801");
		}

		if (stationProfiles1.getStationProfile()[0].equals("Cancer".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Cancer".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Cancer".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 180");
			result.setMeanAgeCohortResult("Mean age in cohort: 33.190458339993334");
			result.setPatientCohortFor("Patient cohort for Cancer, Cancer, Cancer");
			result.setRetrievedCohortSize("Retrieved cohort size 1200");
		}

		if (stationProfiles1.getStationProfile()[0].equals("Obesity".toLowerCase())
				&& stationProfiles1.getStationProfile()[1].equals("Diabetes".toLowerCase())
				&& stationProfiles1.getStationProfile()[2].equals("Cancer".toLowerCase())) {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 200");
			result.setMeanAgeCohortResult("Mean age in cohort: 22.123458333333334");
			result.setPatientCohortFor("Patient cohort for Obesity, Diabetes, Cancer");
			result.setRetrievedCohortSize("Retrieved cohort size 820");
		} else {

			result.setCohortSizeAfterEliminatingPatientswithNOAgeData(
					"Cohort size after eliminating patients with no age data: 576");
			result.setMeanAgeCohortResult("Mean age in cohort: 11.536458333333334");
			result.setPatientCohortFor("Patient cohort to find the BMI, age based.");
			result.setRetrievedCohortSize("Retrieved cohort size 580");

		}

		return result;

	}


	// TODO Do it.
	public String getDOI() {
		// getDraftDOI();
		return "";
	}

	// TODO Do it.
	public Boolean uploadToDataCite(Train train) {
		// TODO Auto-generated method stub
		return null;
	}

	public Boolean uploadFilesToFilesRepository(Train train) {
		// TODO Auto-generated method stub
		return null;
	}

	private static final String OK = "OK";

	private static final String APPLICATION_VND_API_JSON = "application/vnd.api+json";

	private static final String UTF_8 = "UTF-8";

	private static final String TEMPLATE_LOCATION = "/Users/jbjares/workspaces/TrainmodelHelper/TrainModel/src/main/resources/content/my_draft_doi.json";

	private static final String TEMPLATE_FROM_DRAFT_TO_REGISTERED = "/Users/jbjares/workspaces/TrainmodelHelper/TrainModel/src/main/resources/content/change_draft_to_rester_doi.json";

	public void getDraftDOI() throws Exception {
		// https://api.datacite.org/dois
		String hostname = "https://api.test.datacite.org/dois";
		String password = "Nahan@123";
		String username = "DEV.FIT";

		UsernamePasswordCredentials creds = new UsernamePasswordCredentials(hostname, password);
		System.out.println("User: " + creds.getUserPrincipal().getName());
		System.out.println("Password: " + creds.getPassword());

		String authString = hostname + ":" + password;
		System.out.println("auth string: " + authString);
		byte[] authEncBytes = Base64.getEncoder().encode(authString.getBytes());
		String authStringEnc = new String(authEncBytes);
		System.out.println("Base64 encoded auth string: " + authStringEnc);

		URI uri = new URIBuilder().setScheme("https").setHost("api.test.datacite.org").setPath("/dois")
				.setParameter("username", username).build();

		HttpEntity entity = MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE)
				.setCharset(Charset.forName(UTF_8)).addBinaryBody("my_draft_doi.json", new File(TEMPLATE_LOCATION))
				// .addBinaryBody("@my_draft_doi.json", FileUtils.readFileToByteArray(new
				// File(TEMPLATE_LOCATION)), ContentType.create(APPLICATION_VND_API_JSON),
				// "my_draft_doi.json")
				.build();

		HttpPost post = new HttpPost(uri);
		post.addHeader("Content-Type", "application/vnd.api+json");
		post.addHeader("--user", "DEV.FIT:Nahan@123");
		post.addHeader("-d", "@my_draft_doi.json");
		post.setEntity(entity);
		System.out.println(post.getURI());
		HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, OK);

		System.out.println(response.getProtocolVersion());
		System.out.println(response.getStatusLine().getStatusCode());
		System.out.println(response.getStatusLine().getReasonPhrase());
		System.out.println(response.getStatusLine().toString());

		InputStreamEntity reqEntity = new InputStreamEntity(new FileInputStream(new File(TEMPLATE_LOCATION)), -1,
				ContentType.APPLICATION_OCTET_STREAM);
		reqEntity.setChunked(true);

		System.out.println(
				Request.Get(uri).connectTimeout(1000).socketTimeout(1000).execute().returnContent().asString());
	}

	public Train saveTrainBasic(Train train) {
		return trainRepository.save(train);
	}

	public Train saveTrain(String trainStr) {
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		Train train = gson.fromJson(trainStr, Train.class);
		return trainRepository.save(train);
	}



	public Resources saveResources(Resources resources) {
		return resourceRepository.save(resources);
	}

	// TODO [Important] Do the Documentation. ==============
	public Wagons[] findWagonsById(String trainId) {
		List<Wagons> wagons = new ArrayList<Wagons>();

		for (Wagons wagon : wagonRepository.findAll()) {
			if (wagon.getTrainId().equals(trainId)) {
				wagons.add(wagon);
			}
		}
		return wagons.toArray(new Wagons[wagons.size()]);
	}

	public Wagons findFirstWagonsById(String internalId) {
		List<Wagons> wagons = new ArrayList<Wagons>();

		for (Wagons wagon : wagonRepository.findAll()) {
			if (wagon.getInternalId().equals(internalId)) {
				wagons.add(wagon);
			}
		}
		if (wagons.isEmpty()) {
			return null;
		}
		return wagons.get(0);
	}

	public Artifacts[] findArtifactsByInternalId(String artifactId) {
		List<Artifacts> artifacts = new ArrayList<Artifacts>();

		for (Artifacts artifact : artifactRepository.findAll()) {
			if (artifact.getInternalId().equals(artifactId)) {
				artifacts.add(artifact);
			}
		}
		return artifacts.toArray(new Artifacts[artifacts.size()]);
	}

	public Resources[] findResourcesById(String trainId) {
		List<Resources> resources = new ArrayList<Resources>();

		for (Resources resource : resourceRepository.findAll()) {
			if (resource.getInternalId().equals(trainId)) {
				resources.add(resource);
			}
		}
		return resources.toArray(new Resources[resources.size()]);
	}

	public Resources findFirstResourcesByInternalId(String internalId) {
		List<Resources> resources = new ArrayList<Resources>();

		for (Resources resource : resourceRepository.findAll()) {
			if (resource.getInternalId().equals(internalId)) {
				resources.add(resource);
			}
		}
		if (resources.isEmpty()) {
			return null;
		}
		return resources.get(0);
	}
	// =======================================================

	public Wagons[] addWagonsArr(String trainId) {
		List<Wagons> wagons = new ArrayList<Wagons>();

		for (Wagons wagon : wagonRepository.findAll()) {
			if (wagon.getTrainId().equals(trainId)) {
				wagon.setResources(addResourcesArr(trainId));
				wagons.add(wagon);
			}
		}
		return wagons.toArray(new Wagons[wagons.size()]);
	}

	public Resources[] addResourcesArr(String trainId) {
		List<Resources> resourcesList = new ArrayList<Resources>();
		List<Artifacts> artifactListList = new ArrayList<Artifacts>();

		for (Resources resource : resourceRepository.findAll()) {
			if (resource != null && resource.getWagonId() != null && resource.getWagonId().equals(trainId)) {
				for (Artifacts artifact : artifactRepository.findAll()) {
					resource.setArtifacts(addArtifactsArr(trainId));
					artifactListList.add(artifact);
					// resource.setArtifacts(artifactListList.toArray(new
					// Artifacts[artifactListList.size()]));
				}
				resourcesList.add(resource);
			}
		}
		return resourcesList.toArray(new Resources[resourcesList.size()]);
	}

	public Artifacts[] addArtifactsArr(String trainId) {
		List<Artifacts> artifactsList = new ArrayList<Artifacts>();

		for (Artifacts artifact : artifactRepository.findAll()) {
			artifact.setResourceId(trainId);
			if (artifact.getResourceId().equals(trainId)) {
				artifactsList.add(artifact);
			}
		}
		return artifactsList.toArray(new Artifacts[artifactsList.size()]);
	}

	public void saveArtifacts(Artifacts[] artifact) {
		for (int i = 0; i >= artifact.length; i++) {
			artifactRepository.save(artifact[i]);
		}

	}

	public Artifacts saveArtifacts(Artifacts artifact) {
		return artifactRepository.save(artifact);
	}

	public Resources saveResource(Resources resource) {
		return resourceRepository.save(resource);
	}

	public Wagons saveWagon(Wagons wagon) {
		return wagonRepository.save(wagon);

	}

	public Artifacts saveArtifact(Artifacts artifact) {
		return artifactRepository.save(artifact);
	}

	public Iterable<Resources> saveResourcesAll(Resources[] resources) {
		return resourceRepository.saveAll(Arrays.asList(resources));
	}


	private String getTemplate() throws IOException {
		
		//String result = TrainUtil.readFileToStr("/Users/jbjares/workspaces/TrainmodelHelper/train-microservices-esb/src/main/resources/content/lanpageAsTemplate.html");
		String result = "<!doctype html>\n" + 
				"<html>\n" + 
				"  <head>\n" + 
				"    <title>Welcome to the PHT Project.</title>\n" + 
				"  </head>\n" + 
				"  <body>\n" + 
				"    <p>This page was auto generated by the Train Platform Project to give you a brief introduction about the project as well to \n" + 
				"    make easy to find information and resources related to each new Train experiment.\n" + 
				"    <p>Please, find below the information regarding the experiment.</p>\n" + 
				"    \n" + 
				"    <p>Experiment name: ||experimentname_var||</p>\n" + 
				"    <p>Experiment Description: ||experimentdescription_var||</p>\n" + 
				"    <p>Experiment DOIdentifier:  <a href=\"||experimentidentifier_var||\">||experimentidentifier_var||</a></p>\n" + 
				"    <p>Datacite Metadata:  <a href=\"||experimentdataciteendpoint_var||\">||experimentdataciteendpoint_var||</a></p>\n" + 
				"    <p>Datacite Endpoint:  <a href=\"https://doi.test.datacite.org/clients/dev.fit\">https://doi.test.datacite.org/clients/dev.fit</a></p>\n" + 
				"    <p>Experiment Version: ||experimentversion_var||</p>\n" + 
				"    <p>Experiment Metadata: <a href=\"||experimentmetadata_var||\">||experimentmetadata_var||</a></p>\n" + 
				"    <p>Experiment Artifacts: <a href=\"||experimentresources_var||\">||experimentresources_var||</a></p>\n" + 
				"    <p>Experiment Platform endpoint: <a href=\"||experimentplatformendpoint_var||\">||experimentplatformendpoint_var||</a></p>\n" + 
				"    <p>Platform Rest API: <a href=\"||experimentrestapi_var||\">||experimentrestapi_var||</a></p>\n" + 
				"    <!-- <p>Platform Javodoc: ||experimentjavadoc_var||</p> -->\n" + 
				"     \n" + 
				"\n" + 
				"     For more information or suggestion, contact: <a href = \"mailto: joao.bosco.jares.alves.chaves@fit.fraunhofer.de\">Train Platform Support</a>.\n" + 
				"    \n" + 
				"  </body>\n" + 
				"</html>";
		return result;
	}

	/**
	 * {0} = ${doi_var}- {1} = ${experimentname_var}- {2} = ${experimentname_var}-
	 * {3} = ${experimentname_var}- {4} = ${experimentname_var}- {5} =
	 * ${experimentname_var}- {6} = ${projectdescription_var}
	 * 
	 * @param train
	 * @param trainId
	 * @return
	 * @throws IOException
	 */
	public String customlandpage(Train train) throws IOException {
		String page = getTemplate();
		return page.replace("||experimentname_var||", train.getName())
				.replace("||experimentdescription_var||", train.getDescription())
				.replace("||experimentidentifier_var||",
						"https://doi.org/" + train.getDatacite().getIdentifier().getPrefix() + "/"
								+ train.getDatacite().getIdentifier().getSuffix())
				.replace("||experimentdataciteendpoint_var||", train.getDatacite().getIdentifier().getProviderURL())
				.replace("||experimentversion_var||", train.getInternalVersion())
				.replace("||experimentmetadata_var||", train.getDatacite().getIdentifier().getMetadataUrl())
				.replace("||experimentresources_var||", train.getDatacite().getIdentifier().getResourcesUrl())
				.replace("||experimentplatformendpoint_var||", train.getFlow().getFlowURL())
				.replace("||experimentrestapi_var||", train.getRestApiDocUrl());
	}

	// == Nodered Metadata ==
	// ==============================================================================

	// ==Train

	public TrainMetadataNoderedNODE saveNoderedMetadataTrain(String trainStr) {
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		TrainMetadataNoderedNODE trainNode = gson.fromJson(trainStr, TrainMetadataNoderedNODE.class);
		return trainRepositoryNode.save(trainNode);
	}

	public TrainMetadataNoderedNODE saveNoderedMetadataTrain(TrainMetadataNoderedNODE trainNode) {
		TrainMetadataNoderedNODE result = trainRepositoryNode.save(trainNode);
		return result;
	}

	public TrainMetadataNoderedNODE findFirstNoderedMetadataTrainByInternalId(String internalId) {
		List<TrainMetadataNoderedNODE> trainNodeList = new ArrayList<TrainMetadataNoderedNODE>();

		for (TrainMetadataNoderedNODE trainNode : trainRepositoryNode.findAll()) {
			if (trainNode.getInternalId().equals(internalId)) {
				trainNodeList.add(trainNode);
			}
		}
		if (trainNodeList.isEmpty()) {
			return null;
		}
		return trainNodeList.get(0);
	}

	public void deleteAllNoderedMetadataTrain() {
		trainRepositoryNode.deleteAll();
	}

	public Train findFirstTrainByInternalId(String internalId) {
		List<Train> trainList = new ArrayList<Train>();

		for (Train train : trainRepository.findAll()) {
			if (train.getInternalId().equals(internalId)) {
				trainList.add(train);
			}
		}
		if (trainList.isEmpty()) {
			return null;
		}
		return trainList.get(0);
	}

	public Train saveTrainAsStr(String input) {
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		Train train = gson.fromJson(input, Train.class);
		if (train.getInternalId() == null || train.getInternalPointer() == null) {
			throw new RuntimeException(
					"Error while saving the Train. The internalId or internalPointer attributes should be empty or null");
		}
		try {
			return trainRepository.save(train);
		} catch (Exception e) {
			throw new RuntimeException("Fail to save the Train", e);
		}
	}

	public Train saveTrainAsObj(Train train) {
		if (train.getInternalId() == null || train.getInternalPointer() == null) {
			throw new RuntimeException(
					"Error while saving the Train. The internalId or internalPointer attributes should be empty or null");
		}
		try {
			return trainRepository.save(train);
		} catch (Exception e) {
			throw new RuntimeException("Fail to save the Train", e);
		}

	}

//==Wagon

	public WagonsMetadataNoderedNODE saveNoderedMetadataWagon(WagonsMetadataNoderedNODE wagonNode) {
		WagonsMetadataNoderedNODE result = wagonRepositoryNode.save(wagonNode);
		return result;
	}

	public WagonsMetadataNoderedNODE saveNoderedMetadataWagon(String input) {
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		WagonsMetadataNoderedNODE wagonNode = gson.fromJson(input, WagonsMetadataNoderedNODE.class);
		return wagonRepositoryNode.save(wagonNode);
	}

	public WagonsMetadataNoderedNODE findNoderedMetadataWagonByInternalId(String id) {
		try {
			Optional<WagonsMetadataNoderedNODE> optTrain = wagonRepositoryNode.findById(id);
			if (optTrain != null) {
				return wagonRepositoryNode.findById(id).get();
			}
		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;

	}

	public WagonsMetadataNoderedNODE findNoderedMetadataWagonByInternalIdAndId(String internalId,
			String resourcesWireToWagon) {

		for (WagonsMetadataNoderedNODE wagonsMetadataNoderedNODE : wagonRepositoryNode.findAll()) {
			if (resourcesWireToWagon.equals(wagonsMetadataNoderedNODE.getId())) {
				System.out.println(wagonsMetadataNoderedNODE.getId());
				return wagonsMetadataNoderedNODE;
			}
		}
		return null;
	}

	public ResourcesMetadataNoderedNODE findWagonNodeByInternalIdAndId(String internalId, String resourcesWireToWagon) {

		for (ResourcesMetadataNoderedNODE resourcesMetadataNoderedNODE : resourcesRepositoryNode.findAll()) {
			if (resourcesWireToWagon.equals(resourcesMetadataNoderedNODE.getId())) {
				System.out.println(resourcesMetadataNoderedNODE.getId());
				return resourcesMetadataNoderedNODE;
			}
		}
		return null;
	}

	public ResourcesMetadataNoderedNODE findNoderedMetadataResourceByInternalIdAndId(String internalId,
			String resourcesWireToWagon) {

		for (ResourcesMetadataNoderedNODE resourcesMetadataNoderedNODE : resourcesRepositoryNode.findAll()) {
			System.out.println("resourcesWireToWagon: " + resourcesWireToWagon);
			System.out.println("resourcesMetadataNoderedNODE.getId(): " + resourcesMetadataNoderedNODE.getId());

			if (resourcesWireToWagon.trim().equals(resourcesMetadataNoderedNODE.getId().toString().trim())
					&& internalId.equals(resourcesMetadataNoderedNODE.getInternalId())) {
				System.out.println("resourcesWireToWagon internalid: " + internalId);
				System.out.println("resourcesMetadataNoderedNODE.getId() internalid: "
						+ resourcesMetadataNoderedNODE.getInternalId());
				return resourcesMetadataNoderedNODE;
			}
		}
		return null;
	}

	public void deleteAllNoderedMetadataWagon() {
		wagonRepositoryNode.deleteAll();

	}

	public WagonsMetadataNoderedNODE[] findWagonNodeByInternalId(String internalId) {
		List<WagonsMetadataNoderedNODE> wagonsList = new ArrayList<WagonsMetadataNoderedNODE>();

		for (WagonsMetadataNoderedNODE wagon : wagonRepositoryNode.findAll()) {
			if (internalId.equals(wagon.getInternalId())) {
				wagonsList.add(wagon);
			}
		}
		return wagonsList.toArray(new WagonsMetadataNoderedNODE[wagonsList.size()]);
	}

	public WagonsMetadataNoderedNODE[] findWagonsArrByInternalIdAndParentWireId(String internalId,
			String parentWireId) {
		List<WagonsMetadataNoderedNODE> wagonsList = new ArrayList<WagonsMetadataNoderedNODE>();

		for (WagonsMetadataNoderedNODE wagon : wagonRepositoryNode.findAll()) {
			if (internalId.equals(wagon.getInternalId()) && parentWireId.equals(wagon.getId())) {
				wagonsList.add(wagon);
			}
		}
		return wagonsList.toArray(new WagonsMetadataNoderedNODE[wagonsList.size()]);
	}

	public WagonsMetadataNoderedNODE[] findWagonsArrByInternalId(String internalId) {
		List<WagonsMetadataNoderedNODE> wagonsList = new ArrayList<WagonsMetadataNoderedNODE>();

		for (WagonsMetadataNoderedNODE wagon : wagonRepositoryNode.findAll()) {
			wagonsList.add(wagon);
		}
		return wagonsList.toArray(new WagonsMetadataNoderedNODE[wagonsList.size()]);
	}

	// ==Resources

	public ResourcesMetadataNoderedNODE findNoderedMetadataResourcesByInternalIdAndId(String internalId,
			String resourcesWireToWagon) {

		for (ResourcesMetadataNoderedNODE wagonsMetadataNoderedNODE : resourcesRepositoryNode.findAll()) {
			if (resourcesWireToWagon.equals(wagonsMetadataNoderedNODE.getId())) {
				System.out.println(wagonsMetadataNoderedNODE.getId());
				return wagonsMetadataNoderedNODE;
			}
		}
		return null;
	}

	public ResourcesMetadataNoderedNODE saveNoderedMetadataResources(ResourcesMetadataNoderedNODE trainNode) {
		ResourcesMetadataNoderedNODE result = resourcesRepositoryNode.save(trainNode);
		return result;
	}

	public ResourcesMetadataNoderedNODE findNoderedMetadataResourcesByInternalId(String id) {
		try {
			Optional<ResourcesMetadataNoderedNODE> optTrain = resourcesRepositoryNode.findById(id);
			if (optTrain != null) {
				return resourcesRepositoryNode.findById(id).get();
			}
		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;

	}

	public ResourcesMetadataNoderedNODE findFirstResourcesNodeById(String internalId) {
		List<ResourcesMetadataNoderedNODE> resourceList = new ArrayList<ResourcesMetadataNoderedNODE>();

		for (ResourcesMetadataNoderedNODE resourceNode : resourcesRepositoryNode.findAll()) {
			if (resourceNode.getInternalId().equals(internalId)) {
				resourceList.add(resourceNode);
			}
		}
		if (resourceList.isEmpty()) {
			return null;
		}
		return resourceList.get(0);
	}

	public void deleteAllNoderedMetadataResources() {
		resourcesRepositoryNode.deleteAll();

	}
//==Artifacts

	public ArtifactsMetadataNoderedNODE saveNoderedMetadataArtifacts(ArtifactsMetadataNoderedNODE trainNode) {
		ArtifactsMetadataNoderedNODE result = artifactsRepositoryNode.save(trainNode);
		return result;
	}

	public ArtifactsMetadataNoderedNODE findNoderedMetadataArtifactsByInternalId(String id) {
		try {
			Optional<ArtifactsMetadataNoderedNODE> optTrain = artifactsRepositoryNode.findById(id);
			if (optTrain != null) {
				return artifactsRepositoryNode.findById(id).get();
			}
		} catch (java.util.NoSuchElementException e) {
			return null;
		}

		return null;

	}

	public void deleteAllNoderedMetadataArtifacts() {
		artifactsRepositoryNode.deleteAll();

	}

	public Artifacts findFirstArtifactByInternalId(String internalId) {
		List<Artifacts> resources = new ArrayList<Artifacts>();

		for (Artifacts artifact : artifactRepository.findAll()) {
			if (artifact.getInternalId().equals(internalId)) {
				resources.add(artifact);
			}
		}
		if (resources.isEmpty()) {
			return null;
		}
		return resources.get(0);
	}

	// ==

	// ==Execute: wrapper

	// -- wagons into train
	@SuppressWarnings("null")
	public Train wrapperTheTrainObjects(String internalId) {
		Train train = findFirstTrainByInternalId(internalId);
		TrainMetadataNoderedNODE trainNode = findTrainNodeByCorrelationAndInternalId(train.getCorrelationObjectId(),
				train.getInternalId());

		List<WagonsMetadataNoderedNODE> wagonNodeList = findWagonListNodeByTrainNode(trainNode);
		List<Wagons> wagonsList = findWagonsListByWagonNodeList(wagonNodeList);

		Wagons[] wagonsArr = wagonsList.toArray(new Wagons[wagonsList.size()]);
		train.setWagons(wagonsArr);
		train = saveTrainAsObj(train);

		return train;
	}

	public Train wrapperTheWagonObjects(String internalId) {
		Train train = findFirstTrainByInternalId(internalId);
		TrainMetadataNoderedNODE trainNode = findTrainNodeByCorrelationAndInternalId(train.getCorrelationObjectId(),
				train.getInternalId());

		List<Wagons> wagonsList = new ArrayList<Wagons>();
		List<WagonsMetadataNoderedNODE> wagonNodeList = findWagonListNodeByTrainNode(trainNode);

		for (WagonsMetadataNoderedNODE wagonNode : wagonNodeList) {

			List<ResourcesMetadataNoderedNODE> resourceNodeList = findResourceNodeListNodeByWagonNode(wagonNode);

			for (ResourcesMetadataNoderedNODE rsourceNode : resourceNodeList) {
				List<Resources> resourceList = findResourceListByResourceNode(rsourceNode);

				Wagons wagon = findWagonsByCorrelationObjAndInternalId(wagonNode.getCorrelationObjectId(),
						wagonNode.getInternalId());

				Resources[] resourceArr = resourceList.toArray(new Resources[resourceList.size()]);
				wagon.setResources(resourceArr);
				wagonsList.add(wagon);

				Wagons[] wagonsArr = wagonsList.toArray(new Wagons[wagonsList.size()]);
				train.setWagons(wagonsArr);
				train = saveTrainAsObj(train);
			}

		}

		return train;
	}

	private Wagons findWagonsByCorrelationObjAndInternalId(String correlationObjectId, String internalId) {
		Query query = new Query();
		query.addCriteria(Criteria.where("correlationObjectId").is(correlationObjectId))
				.addCriteria(Criteria.where("internalId").is(internalId));
		List<Wagons> wagons = mongoOps.find(query, Wagons.class);
		if (!wagons.isEmpty()) {
			return wagons.get(0);
		} else {
			return null;
		}
	}

	private List<ResourcesMetadataNoderedNODE> findResourceNodeListNodeByWagonNode(
			WagonsMetadataNoderedNODE wagonNode) {
		List<ResourcesMetadataNoderedNODE> resourceNodeListResult = new ArrayList<ResourcesMetadataNoderedNODE>();

		Query query = new Query();
		query = new Query();
		query.addCriteria(
				Criteria.where("internalId").is(wagonNode.getInternalId()).and("parentWireId").is(wagonNode.getId()));
		resourceNodeListResult = (mongoOps.find(query, ResourcesMetadataNoderedNODE.class));

		if (!resourceNodeListResult.isEmpty()) {
			return resourceNodeListResult;
		} else {
			return null;
		}

	}

	private List<Resources> findResourceListByResourceNode(ResourcesMetadataNoderedNODE resourceNode) {
		List<Resources> resourceResultList = new ArrayList<Resources>();
		Query query = new Query();

		query = new Query();
		query.addCriteria(Criteria.where("internalId").is(resourceNode.getInternalId()).and("correlationObjectId")
				.is(resourceNode.getCorrelationObjectId()));
		resourceResultList = mongoOps.find(query, Resources.class);

		if (!resourceResultList.isEmpty()) {
			return resourceResultList;
		} else {
			return null;
		}

	}

	private List<Resources> findResourceListByResourceNodeList(List<ResourcesMetadataNoderedNODE> resourceNodeList) {
		List<Resources> resourceResultList = new ArrayList<Resources>();
		Query query = new Query();

		for (ResourcesMetadataNoderedNODE resourceNode : resourceNodeList) {
			query = new Query();
			query.addCriteria(Criteria.where("internalId").is(resourceNode.getInternalId()).and("correlationObjectId")
					.is(resourceNode.getCorrelationObjectId()));
			resourceResultList.addAll(mongoOps.find(query, Resources.class));
		}

		return resourceResultList;
	}

	private List<ResourcesMetadataNoderedNODE> findResourceNodeListNodeByWagonNodeList(
			List<WagonsMetadataNoderedNODE> wagonNodeList) {
		List<ResourcesMetadataNoderedNODE> resourceNodeListResult = new ArrayList<ResourcesMetadataNoderedNODE>();

		// resourceNodeListResult
		for (WagonsMetadataNoderedNODE wagonNode : wagonNodeList) {
			Query query = new Query();
			query = new Query();
			query.addCriteria(Criteria.where("internalId").is(wagonNode.getInternalId()).and("parentWireId")
					.is(wagonNode.getId()));
			resourceNodeListResult.addAll(mongoOps.find(query, ResourcesMetadataNoderedNODE.class));
		}

		return resourceNodeListResult;
	}

	private List<Wagons> findWagonsListByWagonNodeList(List<WagonsMetadataNoderedNODE> wagonNodeList) {
		List<Wagons> wagonsResultList = new ArrayList<Wagons>();
		Query query = new Query();

		for (WagonsMetadataNoderedNODE wagonNode : wagonNodeList) {
			query = new Query();
			query.addCriteria(Criteria.where("internalId").is(wagonNode.getInternalId()).and("correlationObjectId")
					.is(wagonNode.getCorrelationObjectId()));
			List<Wagons> wagonsList = mongoOps.find(query, Wagons.class);
			wagonsResultList.addAll(wagonsList);
		}

		return wagonsResultList;
	}

	private List<WagonsMetadataNoderedNODE> findWagonListNodeByTrainNode(TrainMetadataNoderedNODE trainNode) {
		Query query = new Query();
		query = new Query();
		query.addCriteria(
				Criteria.where("internalId").is(trainNode.getInternalId()).and("parentWireId").is(trainNode.getId()));
		List<WagonsMetadataNoderedNODE> wagonNodeList = mongoOps.find(query, WagonsMetadataNoderedNODE.class);
		return wagonNodeList;
	}

	private TrainMetadataNoderedNODE findTrainNodeByCorrelationAndInternalId(String correlationObjectId,
			String internalId) {
		Query query = new Query();
		query.addCriteria(Criteria.where("correlationObjectId").is(correlationObjectId))
				.addCriteria(Criteria.where("internalId").is(internalId));

		TrainMetadataNoderedNODE trainNode = null;
		List<TrainMetadataNoderedNODE> trainList = mongoOps.find(query, TrainMetadataNoderedNODE.class);
		if (!trainList.isEmpty()) {
			trainNode = trainList.get(0);
			return trainNode;
		} else {
			return null;
		}

	}

	// -- resources into wagons

	// -- artifacts into resources

	public Train wrapperTheResourcesObjects(String internalId) {
		Train train = findFirstTrainByInternalId(internalId);
		TrainMetadataNoderedNODE trainNode = findTrainNodeByCorrelationAndInternalId(train.getCorrelationObjectId(),
				train.getInternalId());

		List<WagonsMetadataNoderedNODE> wagonNodeList = findWagonListNodeByTrainNode(trainNode);
		List<Resources> resourcesList = new ArrayList<Resources>();
		for (WagonsMetadataNoderedNODE wagonNode : wagonNodeList) {
			List<Wagons> wagonsList = new ArrayList<Wagons>();

			Wagons wagon = findWagonsByCorrelationObjAndInternalId(wagonNode.getCorrelationObjectId(),
					wagonNode.getInternalId());

			List<ResourcesMetadataNoderedNODE> resourceNodeList = findResourceNodeListNodeByWagonNode(wagonNode);

			for (ResourcesMetadataNoderedNODE rsourceNode : resourceNodeList) {
				List<Artifacts> artifactsList = new ArrayList<Artifacts>();
				Resources resources = findResourcesByCorrelationObjAndInternalId(rsourceNode.getCorrelationObjectId(),
						rsourceNode.getInternalId());

				List<ArtifactsMetadataNoderedNODE> artifactsNodeList = findArtifactsNodeListByResourcesNode(
						rsourceNode);

				for (ArtifactsMetadataNoderedNODE artifactNode : artifactsNodeList) {
					artifactsList.addAll(findArtifactsListByArtifactsNode(artifactNode));
				}

				Artifacts[] artifactsArr = artifactsList.toArray(new Artifacts[artifactsList.size()]);
				resources.setArtifacts(artifactsArr);
				resourcesList.add(resources);
			}

			Resources[] resourceArr = resourcesList.toArray(new Resources[resourcesList.size()]);
			wagon.setResources(resourceArr);
			wagonsList.add(wagon);

			Wagons[] wagonsArr = wagonsList.toArray(new Wagons[wagonsList.size()]);
			train.setWagons(wagonsArr);
			train = saveTrainAsObj(train);
		}

		return train;
	}

	private Resources findResourcesByCorrelationObjAndInternalId(String correlationObjectId, String internalId) {
		Query query = new Query();
		query.addCriteria(Criteria.where("correlationObjectId").is(correlationObjectId))
				.addCriteria(Criteria.where("internalId").is(internalId));
		List<Resources> resources = mongoOps.find(query, Resources.class);
		if (!resources.isEmpty()) {
			return resources.get(0);
		} else {
			return null;
		}
	}

	private List<Artifacts> findArtifactsListByArtifactsNode(ArtifactsMetadataNoderedNODE artifactNode) {
		List<Artifacts> artifactsResultList = new ArrayList<Artifacts>();
		Query query = new Query();

		query = new Query();
		query.addCriteria(Criteria.where("internalId").is(artifactNode.getInternalId()).and("correlationObjectId")
				.is(artifactNode.getCorrelationObjectId()));
		artifactsResultList = mongoOps.find(query, Artifacts.class);

		if (!artifactsResultList.isEmpty()) {
			return artifactsResultList;
		} else {
			return null;
		}
	}

	private List<ArtifactsMetadataNoderedNODE> findArtifactsNodeListByResourcesNode(
			ResourcesMetadataNoderedNODE rsourceNode) {
		List<ArtifactsMetadataNoderedNODE> artifactsNodeListResult = new ArrayList<ArtifactsMetadataNoderedNODE>();

		Query query = new Query();
		query = new Query();
		query.addCriteria(Criteria.where("internalId").is(rsourceNode.getInternalId()).and("parentWireId")
				.is(rsourceNode.getId()));
		artifactsNodeListResult = (mongoOps.find(query, ArtifactsMetadataNoderedNODE.class));

		if (!artifactsNodeListResult.isEmpty()) {
			return artifactsNodeListResult;
		} else {
			return null;
		}
	}

//	public Train wrapperTheResourcesObjects(String internalId) {
//		Train train = findFirstTrainByInternalId(internalId);
//		if (train.getWagons() == null || train.getWagons().length == 0) {
//			return train;
//		}
//
//		List<Resources> resourcesList = new ArrayList<Resources>();
//		List<Wagons> wagonsList = new ArrayList<Wagons>();
//		List<Artifacts> artifacstList = new ArrayList<Artifacts>();
//
//		for (Wagons wagon : train.getWagons()) {
//			WagonsMetadataNoderedNODE wagonNode = findNoderedMetadataWagonByCorrelationObjectId(
//					wagon.getCorrelationObjectId());
//			if (wagonNode == null || wagonNode.getId() == null || "".equals(wagonNode.getId())) {
//				return train;
//			}
//
//			List<String> wagonnWires = TrainUtil.convertWiresInternalIdStrToListStr(wagon.getInternalPointer());
//			for (String wagonWire : wagonnWires) {
//				ResourcesMetadataNoderedNODE resourceNode = findNoderedMetadataResourceByInternalIdAndId(internalId,
//						wagonWire);
//				if (resourceNode == null || resourceNode.getCorrelationObjectId() == null
//						|| "".equals(resourceNode.getCorrelationObjectId())) {
//					return train;
//				}
//				if (resourceNode == null || resourceNode.getParentWireId() == null
//						|| resourceNode.getParentWireId().length == 0) {
//					continue;
//				}
//
//				if (!TrainUtil.convertWiresArrToStr(resourceNode.getParentWireId()).contains(wagonNode.getId())) {
//					continue;
//				}
//
//				Resources resources = findResourcesByCorrelationObjectId(resourceNode.getCorrelationObjectId());
//
//				if (resources == null || resources.getInternalPointer() == null
//						|| "".equals(resources.getInternalPointer())) {
//					continue;
//				}
//
//				List<Artifacts> artifactsList = findArtifactsNodeByAndResourceNodeId(resourceNode,
//						resources.getInternalId());
//
//				if (artifactsList == null || artifactsList.isEmpty()) {
//					continue;
//				}
//				artifacstList.addAll(artifactsList);
//				resources.setArtifacts(artifacstList.toArray(new Artifacts[artifacstList.size()]));
//				resourcesList.add(resources);
//
//			}
//			if (resourcesList == null || resourcesList.isEmpty()) {
//				continue;
//			}
//			Resources[] resourcesArr = resourcesList.toArray(new Resources[resourcesList.size()]);
//			wagon.setResources(resourcesArr);
//			wagonsList.add(wagon);
//		}
//
//		Wagons[] wagonsArr = wagonsList.toArray(new Wagons[wagonsList.size()]);
//		train.setWagons(wagonsArr);
//		train = saveTrainAsObj(train);
//		return train;
//
//	}
//	public Train wrapperTheResourcesObjects(String internalId) {
//		Train train = findFirstTrainByInternalId(internalId);
//		if (train.getWagons() == null || train.getWagons().length == 0) {
//			return train;
//		}
//
//		List<Resources> resourcesList = new ArrayList<Resources>();
//		List<Wagons> wagonsList = new ArrayList<Wagons>();
//		List<Artifacts> artifacstList = new ArrayList<Artifacts>();
//
//		for (Wagons wagon : train.getWagons()) {
//			WagonsMetadataNoderedNODE wagonNode = findNoderedMetadataWagonByCorrelationObjectId(
//					wagon.getCorrelationObjectId());
//			if (wagonNode == null || wagonNode.getId() == null || "".equals(wagonNode.getId())) {
//				return train;
//			}
//
//			List<String> wagonnWires = TrainUtil.convertWiresInternalIdStrToListStr(wagon.getInternalPointer());
//			for (String wagonWire : wagonnWires) {
//				ResourcesMetadataNoderedNODE resourceNode = findNoderedMetadataResourceByInternalIdAndId(internalId,
//						wagonWire);
//				if (resourceNode == null || resourceNode.getCorrelationObjectId() == null
//						|| "".equals(resourceNode.getCorrelationObjectId())) {
//					return train;
//				}
//				if (resourceNode == null || resourceNode.getParentWireId() == null
//						|| resourceNode.getParentWireId().length == 0) {
//					continue;
//				}
//
//				if (!TrainUtil.convertWiresArrToStr(resourceNode.getParentWireId()).contains(wagonNode.getId())) {
//					continue;
//				}
//
//				Resources resources = findResourcesByCorrelationObjectId(resourceNode.getCorrelationObjectId());
//
//				if (resources == null || resources.getInternalPointer() == null
//						|| "".equals(resources.getInternalPointer())) {
//					continue;
//				}
//
//				List<Artifacts> artifactsList = findArtifactsNodeByAndResourceNodeId(resourceNode,
//						resources.getInternalId());
//
//				if (artifactsList == null || artifactsList.isEmpty()) {
//					continue;
//				}
//				artifacstList.addAll(artifactsList);
//				resources.setArtifacts(artifacstList.toArray(new Artifacts[artifacstList.size()]));
//				resourcesList.add(resources);
//
//			}
//			if (resourcesList == null || resourcesList.isEmpty()) {
//				continue;
//			}
//			Resources[] resourcesArr = resourcesList.toArray(new Resources[resourcesList.size()]);
//			wagon.setResources(resourcesArr);
//			wagonsList.add(wagon);
//		}
//
//		Wagons[] wagonsArr = wagonsList.toArray(new Wagons[wagonsList.size()]);
//		train.setWagons(wagonsArr);
//		train = saveTrainAsObj(train);
//		return train;
//
//	}

	private List<Artifacts> findAllArtifacts() {
		List<Artifacts> result = new ArrayList<Artifacts>();
		for (Artifacts artfct : artifactRepository.findAll()) {
			result.add(artfct);
		}
		return result;
	}

	private List<Artifacts> findArtifactCorrelationObjectId(String correlationObjectId) {
		List<Artifacts> result = new ArrayList<Artifacts>();
		for (Artifacts artifact : artifactRepository.findAll()) {
			String artifactId = artifact.get_id().toString().trim();
			if (correlationObjectId.trim().equals(artifactId)) {
				result.add(artifact);
			}
			if (result.isEmpty() && artifactId.equals(artifact.getCorrelationObjectId())) {
				result.add(artifact);
			}

		}
		return result;
	}

	private List<Artifacts> findArtifactsNodeByAndResourceNodeId(ResourcesMetadataNoderedNODE resourceNode,
			String internalId) {

		for (ArtifactsMetadataNoderedNODE artifactNode : artifactsRepositoryNode.findAll()) {
			for (String resourceNodesWires : resourceNode.getWires()[0]) {

				if (artifactNode.getInternalId().equals(internalId)
						&& artifactNode.getId().equals(resourceNodesWires)) {
					return findArtifactCorrelationObjectId(artifactNode.getCorrelationObjectId());

				}

			}

		}

		return null;
	}

	private WagonsMetadataNoderedNODE findNoderedMetadataWagonByCorrelationObjectId(String correlationObjectId) {

		for (WagonsMetadataNoderedNODE wagonNode : wagonRepositoryNode.findAll()) {
			if (correlationObjectId.equals(wagonNode.getCorrelationObjectId())) {
				return wagonNode;
			}

		}
		return null;
	}

	// TODO: The wagonNode.getParentWireId()[0] means that just one train per flow
	// is possible.
	private WagonsMetadataNoderedNODE findNoderedMetadataWagonByTrainId(String internalId, String trainNodeId) {
		List<WagonsMetadataNoderedNODE> wagonList = new ArrayList<WagonsMetadataNoderedNODE>();

		for (WagonsMetadataNoderedNODE wagonNode : wagonList) {
			if (internalId.equals(wagonNode.getInternalId()) && wagonNode.getParentWireId()[0].equals(trainNodeId)) {
				return wagonNode;
			}
		}
		return null;
	}

	// ==Execute

//	public Train wrapperTheTrainObjects(String internalId) {
//		Train train = findFirstTrainByInternalId(internalId);
//		TrainMetadataNoderedNODE trainNode = findFirstNoderedMetadataTrainByInternalId(internalId);
//		WagonsMetadataNoderedNODE[] wagonNodeArr = findWagonsArrByInternalId(internalId);
//		
//		int trainWireCount = Integer.parseInt(trainNode.get_wireCount());
//		if(trainWireCount<=0) {
//			throw new RuntimeException("Please attach your Wagon on the Train Node");
//		}
//		
//		//TODO create a framework to do the exception handler, as well as return an exception below
//		if(wagonNodeArr==null || wagonNodeArr.length==0) {
//			return train;
//		}
//		
//		for(int i = 0; i<wagonNodeArr.length;i++) {
//			
//			
//			//TODO paste the code
//		}
//		
//		
//		Wagons[] wagon = null;
//		wagon = findWagonsById(internalId);
//		
//		return train;
//	}

	// ==
}
